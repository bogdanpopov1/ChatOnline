@using ChatOnline.Data
@inject NavigationManager NavManager
@inject DataContext DataContext
@inject UserContext UserContext

<div class="modal" tabindex="-1" style="display:block">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Вход</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть" @onclick=CloseModal></button>
            </div>
            <div class="modal-body">
                <div style="display:flex; flex-direction: column; gap: 12px;">
                    <div class="form-group">
                        <label for="exampleInputEmail1">Логин</label>
                        <input @bind-value="_username" type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Имя пользователя">
                        <small id="emailHelp" class="form-text text-danger">@_invalidLoginMsg</small>
                    </div>
                    <div class="form-group">
                        <label for="exampleInputPassword1">Пароль</label>
                        <input @bind-value="_password" type="password" class="form-control" id="exampleInputPassword1" placeholder="Пароль">
                        <small id="emailHelp" class="form-text text-danger">@_invalidPasswordMsg</small>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=SignIn>Войти</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=CloseModal>Закрыть</button>
            </div>
        </div>
    </div>
</div>


@code {
    private string _username;
    private string _password;
    private string _invalidLoginMsg;
    private string _invalidPasswordMsg;

    [Parameter]
    public EventCallback OnClose { get; set; }

    public void SignIn()
    {
        if (!CheckLogin())
            return;

        if (!CheckPassword())
            return;

        NavManager.NavigateTo("/chat");
        CloseModal();

    }

    private bool CheckLogin()
    {
        bool isExisted = false;

        foreach (var user in DataContext.Users)
        {
            if (_username.ToLower().Trim() == user.Username)
        {
                isExisted = true;
                UserContext.CurrentUser = user;
            }

        }

        if (!isExisted)
            _invalidLoginMsg = "Пользователя с таким логином не существует!";
        else
            _invalidLoginMsg = string.Empty;

        return isExisted;
    }

    private bool CheckPassword()
    {
        bool isValid = false;

        if (_password.Trim() == UserContext.CurrentUser.Password)
            isValid = true;
        else
            _invalidPasswordMsg = "Неверный пароль!";

        return isValid;
    }

    private void CloseModal()
    {
        OnClose.InvokeAsync();
    }
}
