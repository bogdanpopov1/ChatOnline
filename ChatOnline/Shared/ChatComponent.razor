@using ChatOnline.Data
@inject DataContext DataContext
@inject UserContext UserContext
@inject ChatContext ChatContext

<div class="container">

    <div class="chat-window">

        <div class="user-info">
            <h3><img src="@ChatContext.UserRecipient.Image" class="user-image" alt="image" /> @ChatContext.UserRecipient.Username</h3>
            <button class="btn-close" @onclick=CloseChat></button>
        </div>

        <div class="chat-messages">
            @if (ChatContext.Chat != null)
            {
                @foreach (var m in ChatContext.Chat.Messages)
                {
                    @if (m.UserOwner == UserContext.CurrentUser)
                    {
                        <div class="message message-current-user">
                            <small id="emailHelp" class="form-text text-warning">@m.UserOwner.Username</small>
                            <p>@m.Text</p>
                            <small id="emailHelp" class="form-text text-info">@m.DateTime</small>
                        </div>
                    }
                    else
                    {
                        <div class="message message-recipient-user">
                            <small id="emailHelp" class="form-text text-primary">@m.UserOwner.Username</small>
                            <p>@m.Text</p>
                            <small id="emailHelp" class="form-text text-muted">@m.DateTime</small>
                        </div>
                    }

                }
            }
        </div>

        <div class="send-field">
            <input type="text" placeholder="Введите сообщение..." @bind-value="_messageValue" class="input-group-text send-input" />
            <button @onclick="SendMessage" class="btn btn-primary send-btn">Отправить</button>
        </div>

    </div>

</div>


@code {
    private string _messageValue = "";

    [Parameter]
    public EventCallback OnClose { get; set; }

    private void SendMessage()
    {
        if (_messageValue != "" && _messageValue != null && _messageValue != string.Empty)
            ChatContext.Chat.Messages.Add(new Message(_messageValue, UserContext.CurrentUser));

        _messageValue = "";
    }

    private void CloseChat()
    {
        UpdateChat();
        ChatContext.UserRecipient = null;
        ChatContext.Chat = null;
        OnClose.InvokeAsync();
    }

    protected override void OnParametersSet()
    {
        UpdateChat();
    }

    private void UpdateChat()
    {
        foreach (var c in UserContext.CurrentUser.Chats)
        {
            if (c.UserSender == ChatContext.UserRecipient)
            {
                c.Messages = ChatContext.Chat.Messages;
            }
        }

        foreach (var c in ChatContext.UserRecipient.Chats)
        {
            if (c.UserSender == UserContext.CurrentUser)
            {
                c.Messages = ChatContext.Chat.Messages;
            }
        }
    }
}
